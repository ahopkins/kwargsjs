{"name":"kwargs.js","tagline":"Smart argument management for javascript","body":"# Keyword arguments for Javascript. Similar to python's kwargs\r\n\r\nThis little tool gives you the ability to use keyword arguments support for your functions. So you can either specify each argument as you wish or use the arguments regularly. In fact you can do both at the same time.\r\n\r\nAnother feature is to have the ability to set default values for your function arguments without changing or adding any code to your function.\r\n\r\n## Usage\r\nJust include the script on your site. That's it. When included it will add a new method called `kwargs` to Function prototype and you can use it like this:\r\n\r\n```javascript\r\nvar functionName = function(arg1, arg2){\r\n\t// code\r\n}.kwargs([defaults]);\r\n```\r\n\r\n## Examples\r\nJust write your function as you would normally, and don't worry about the arguments size. just call `.kwargs()` and rest will be handled.\r\n\r\n```javascript\r\nvar test = function(arg1, arg2, arg3){\r\n\t// Your code\r\n}.kwargs();\r\n```\r\n\r\nNow, if you want you can pass all arguments in a single object and they all will be mapped to their correct places\r\n\r\n```javascript\r\ntest({\r\n\targ3: 'val3',\r\n\targ1: 'val1',\r\n\targ2: 'val2'\r\n});\r\n```\r\n\r\nYou can also use your function like you would normally use\r\n\r\n```javascript\r\ntest('val1', 'val2', 'val3');\r\n```\r\n\r\nthe best part is that you can do both\r\n\r\n```javascript\r\ntest('val1', {\r\n\targ3: 'val3',\r\n\targ1: 'val1',\r\n});\r\n```\r\n\r\n### Using Default values for arguments\r\n\r\nLet's say we have this function that says Hello to a given name.\r\n\r\n```javascript\r\nvar greeting = function(name){\r\n\treturn \"Hello \" + name;\r\n};\r\ngreeting('Frank'); // -> Hello Frank\r\n```\r\nIf no name is given, we want it to return \"Hello World\", usually you would have to add conditions to your function and check for existence of `name` argument. kwargs automatically handles that for you.\r\n\r\n```javascript\r\nvar greeting = function(name){\r\n\treturn \"Hello \" + name;\r\n}.kwargs({name: 'World'}); // Set a default value for your argument and \r\n                           // it will be used when this argument is empty\r\n// Here are the results\r\ngreeting('Frank'); // -> Hello Frank\r\ngreeting(); // -> Hello World\r\n```\r\n\r\n## A real example\r\nLet's say we have a function that receives a lot of arguments and generates a name with prefixes and suffixes when provided.\r\n\r\n```javascript\r\nvar name = function(firstName, lastName, middleName, prefix, suffix){\r\n    var name = [];\r\n    if(prefix){\r\n        name.push(prefix);\r\n    }\r\n    name.push(firstName);\r\n    if(middleName){\r\n        name.push(middleName);\r\n    }\r\n    name.push(lastName);\r\n    if(suffix){\r\n        name.push(suffix);\r\n    }\r\n    return name.join(' ');\r\n}.kwargs();\r\n```\r\nNow, when we want create a name with only a suffix, all we have to do is to provide the name and suffix. You can only pass required arguments without changing anything on your function code.\r\n\r\n```javascript\r\nname('John', 'Doe', { suffix:'Ph.D.' });\r\n// -> John Doe Ph.D.\r\nname('Max', 'Fightmaster', { prefix: 'Staff Sgt.' })\r\n// -> Staff Sgt. Max Fightmaster\r\nname('Isaac', 'Newton', { prefix: 'Sir', suffix: 'PRS MP'});\r\n// -> Sir Isaac Newton PRS MP\r\n```\r\n\r\n## Important Note\r\nIf last argument passed is an object, code assumes it's a `kwargs` object, if your function accepts objects as arguments\r\nyou should be careful about this, here is an example.\r\n\r\n```javascript\r\n// in both cases, `anObject` argument will be interpreted as `kwargs` object and be ignored\r\nmyFunc(anObject);\r\nmyFunc('val', anObject);\r\n```\r\n\r\nto avoid this problem you have two solutions\r\n\r\n```javascript\r\nmyFunc(anObject, {}); // passing last argument as an empty object\r\n// or using the options method and passing your object in kwargs\r\nmyFunc({\r\n  arg1: anObject\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}